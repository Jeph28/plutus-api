name: Deploy to Production

on:
  workflow_run:
    workflows: ['Build and Push']
    types:
      - completed
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Check for existing Traefik container
        id: check_traefik
        run: |
          if docker ps --format '{{.Names}}' | grep -q '^traefik$'; then
            echo "TRAEFIK_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "TRAEFIK_EXISTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy Traefik (if not exists)
        if: steps.check_traefik.outputs.TRAEFIK_EXISTS == 'false'
        run: |
          docker compose -f docker-compose.yml up -d

      - name: Deploy to production server
        run: |
          # Define la imagen completa y convierte el nombre del repositorio a min√∫sculas
          REPO_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_TAG="${{ env.REGISTRY }}/$REPO_LOWERCASE:main"

          # Pull the latest image
          docker pull $IMAGE_TAG

          # Stop and remove the existing container if it exists
          docker stop plutus || true
          docker rm plutus || true

          # Run the new container
          docker run -d \
            --name plutus \
            --network traefik-public \
            -e DOPPLER_TOKEN="${{ secrets.DOPPLER_TOKEN }}" \
            --label "traefik.enable=true" \
            --label "traefik.http.routers.api.rule=Host(`api.localhost`)" \
            --label "traefik.http.routers.api.entrypoints=web" \
            --label "traefik.http.services.api.loadbalancer.server.port=3000" \
            $IMAGE_TAG
